1부 행위로 보는 프로그래밍

1. 프로그램 읽기

기계의 한계 :
책이 쓰이고 오랜 시간이 지난 후 2024년에 읽고 있기 때문에 마음 속 깊이 공감 못할 점들이 몇몇 있었다.
특히 개인 프로젝트를 할 때에는 기계의 한계에 부딛히는 일을 접한 일이 거의 없기 때문에 그 부분은 내용을 깊게 공감할 순 없었다.
학교 수업 때 실제로 기계로 존재하는 컴파일러와 천공카드들을 영상자료로 본 기억을 더듬으며 읽었다. 

언어의 한계 : 
막상 당장 지금까지 겪었던 언어의 한계를 서술해보라고 하면 생각나는 것이 몇 없었다.
짜내서 생각나는 것은 c++과는 다르게 java나 C#은 여러 클래스를 상속 받는 것을 지원하고 있지 않지만 이는 의도된 것으로 알고있다.
언어의 한계를 공감하기엔 아직 경험이 적은 것 같다.

프로그래머의 한계 :
이 것은 현재 진행형으로 겪고 있는 듯하다. 당장 언어의 이해에 대한 경험만 나열해도, C#만 해도 프로퍼티를 사용해서 getter와 setter 맴버 함수를 구현할 수 있고, 방법도 여러가지다.
파이썬을 양것 사용해서 천하제일 숏코딩 장기자랑이 열렸던 것을 구경한 기억도 났다.

역사의 흔적 :
(사회보장국 일화)
이것은 자체엔진을 쓰는 두 회사를 짧게라도 경험해본 기억이 다시 떠오르는 일화였다. 둘 다 자체엔진을 사용하는 회사였고 회사 대대로 내려져오는 너덜한 메뉴얼이 존재했으며, 나름의 시행착오와 역사를 느낄 수 있는 모먼트들이 몇 있었다.
한번은 입사 과제를 위하여 엔진을 뒤적이던 중 쓰이지도 않는 클래스와 기능을 발견한 적이 있는데, 그 기능은 과거 엔진이 개발되던 도중 지금은 지원 중단한 윈도우의 AI도우미 라이브러리를 사용해서 개발되다가 폐기된 프로젝트의 흔적이었다.
또한 데이터를 전송받는 로직을 읽어보니 단순히 디렉토리에 파일이 추가되었는지를 확인하는 코드였고 확인해본 결과 회사가 제공하는 서비스의 특성상 보안과 정보의 분리가 중요하여 네트워크로 전송을 받는 것이 아닌 직접 사람이 cd로 정보를 옮겨 담는 것이었다.

"어떤 프로그램이든 현재 모습을 하는데에는 다 이유가 있다. " 이 말은 매우 인상깊은 말이었고 과거와 현재의 교육기간중 계속 겪는 일이라 나의 경험에 있어 계속 생각해내려고 노력 중이다.

2. 좋은 프로그램이란 무엇인가?

(좋은 프로그램을 측정하는 절대적 척도의 존재 유무에 대하여)(개발에 관련된 모든 상황에 비추어 그 프로그램을 평가해야 한다.)
명세에 부합하는 프로그램
(디트로이트 자동차 프로그램 일화)
(프로그램이 작동하지 않는 상황에서 효율성이나 적응성, 개발비용의 다른 척도는 전혀 의미가 없다.)
이 일화는 꼭 프로그램이 아니더라도 보편적인 일의 척도로서 작용할 것 같다. 

일정 :
(이 연구결과가 프로그래밍에도 적용된다면, 특정 개발 방법론을 연구할 때 개발 기간이 변하는데 얼마나 영향을 끼치는지 측정해야 한다.)
이 문구에 있어서 측정이란 단어에 의구심이 들었고 그 의구심을 이 책의 뒷 내용에서 다루고 있다.

적응성 :
프로그램의 생명 주기
(op 코드 최적화 일화)
(효율성을 추구하면 보통은 코드가 빡빡해져서 수정하기 어렵게 된다)

효율성 :
(컴파일러의 효율성 비교)
여기서의 말하는 일화는 나의 경험으로는 공감하기는 힘들었다. 하지만 옛날 프로그래머였던 아버지의 경험(작성한 코드를 대학교에 넘기고 반나절 지나서야 확인할 수 있었다던)
같은 목격담?이 있는 것으로 보아 책의 내용을 실제로 고민하던 사람들이 적지않았을 것이다.
하지만 여기서 말하는 결국엔 trade off가 생긴다는 사실은 두말할 필요없이 사실이다.
그리고 책의 (미래의 컴퓨팅 환경에서는 다양한 크기의 메모리를 가진 다양한 종류의 기계에서 실행될 수 있는 프로그램을 최고로 칠지도 모른다)라는 부분은 인상깊었다.

그리고 학교에서 수업때 잠시 다뤘던 내용 중 하나인 IO_Uring이 생각나기도 했다.

3. 프로그래밍이란 행위를 연구할 방법은 무엇인가?
이 단원은 현재 내가 읽고있는 책(The Art of Game Design)과도 묘하게 연결되어 매우 흥미롭게 읽은 부분이다. 
그리고 두 책이 다루고 있는 분야가 다른 만큼 결국 결론이 달랐던 점도 재미있었다.
내성법:
(내성법은 법칙을 이끌어 낼 수는 없다)(적용 한계를 밝혀야 하며 이는 조사를 통해 이루어진다)

다른 책(The Art of Game Design)에서의 내성법에 대한 의견은 다음과 같다.
(진실인 것처럼 느껴진다고 해서 진실이 아니다.)(하지만 꼭 "객관적인 진실"이 "진실인 것처럼 느껴지는 것"보다 항상 가치있는 것은 아니다.)
(해당 아이디어에 대한 조사와 평가를 하기 위해선 해당 요소가 완성되어야 하는 아이러니)()

관찰 , 실험:
(호손 효과)(관찰과 피관찰자 사이의 간섭현상)(투명인간->로그의 활용)
(고임금의 프로그래머를 사용한 실험의 비용)
다른 책(The Art of Game Design)에서 대안으로 제안하는 방법은 다음과 같다. 자기 자신을 피실험체로 설정하는 것이 가장 비용이 덜 드는 실험이라고 제시한다.
하지만 그렇게 되면 관찰에서 오는 호손 효과가 가장 크게 작용하게 된다. 이 책에서는 그에 대한 대안 방법으로 "경험 녹화"를 통한 경험과 관찰의 분리를 제안한다. (로그와 비슷할 수도 있겠다.)

심리학의 측정법:
(경험의 측정 척도)
이 문단은 너무 어려워서 잘 이해가 안갔다.
먼저 "프로그래머들이 공유하는 문화"라는 키워드에 대해서 이것이 무엇이며 글쓴이는 25년 후 그것이 출현했다고 썼지만, 나는 이것이 명확히 무엇을 의미하는 것인지 이해하진 못한 것 같다.
